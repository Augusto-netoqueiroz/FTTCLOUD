<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <title>Roadmap do Projeto SaaS FTTELECOM</title>
    <script src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js"></script>
    <script>mermaid.initialize({startOnLoad: true});</script>
    <style>
        body { font-family: Arial, sans-serif; margin: 2rem; line-height: 1.5; }
        h1, h2, h3 { color: #2c3e50; }
        table { width: 100%; border-collapse: collapse; margin-bottom: 1.5rem; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        tr:nth-child(even) { background-color: #f9f9f9; }
        code { background-color: #f8f8f8; padding: 2px 4px; border-radius: 4px; }
        .legend { font-style: italic; margin-bottom: 1rem; }
    </style>
</head>
<body>
    <h1>Roadmap do Projeto SaaS FTTELECOM</h1>
    <p>
        Este documento compila o <strong>estado atual</strong> do desenvolvimento do SaaS multi‚Äëtenant FTTELECOM e descreve o <strong>roteiro detalhado</strong> das pr√≥ximas etapas, de acordo com o roteiro detalhado e as melhores pr√°ticas descritas anteriormente. A meta √© construir uma plataforma escal√°vel em Laravel¬†11 com integra√ß√£o completa a Asterisk, billing e demais componentes.
    </p>

    <h2>1. Progresso Atual</h2>
    <table>
        <thead>
            <tr>
                <th>√Årea</th>
                <th>Tarefa</th>
                <th>Status</th>
                <th>Percentual (%)</th>
            </tr>
        </thead>
        <tbody>
            <tr><td><strong>Projeto de Base</strong></td><td>Estrutura inicial do projeto criada (diret√≥rios <code>app/</code>, <code>config/</code>, <code>routes/</code>, <code>database/</code> etc.)</td><td>‚úîÔ∏è Conclu√≠do</td><td>100%</td></tr>
            <tr><td></td><td>Cria√ß√£o de <code>composer.json</code>, <code>.env.example</code> e arquivos de boot (<code>artisan</code>, <code>bootstrap/app.php</code>, <code>public/index.php</code>)</td><td>‚úîÔ∏è Conclu√≠do</td><td>100%</td></tr>
            <tr><td></td><td>Configura√ß√µes b√°sicas (<code>config/app.php</code>, <code>config/database.php</code>, etc.)</td><td>‚úîÔ∏è Conclu√≠do</td><td>100%</td></tr>
            <tr><td><strong>Multi‚Äëtenancy</strong></td><td>Implementa√ß√£o do trait <code>HasTenantScope</code></td><td>‚úîÔ∏è Conclu√≠do</td><td>100%</td></tr>
            <tr><td></td><td>Cria√ß√£o do <code>TenantMiddleware</code> (ajustado para usar usu√°rio autenticado)</td><td>‚úîÔ∏è Conclu√≠do</td><td>100%</td></tr>
            <tr><td></td><td>Cria√ß√£o do <code>TenantServiceProvider</code> e registro no <code>app.php</code></td><td>‚úîÔ∏è Conclu√≠do</td><td>100%</td></tr>
            <tr><td></td><td>Cria√ß√£o de migrations e modelos para <code>tenants</code>, <code>users</code>, <code>calls</code>, <code>call_legs</code> e <code>recordings</code></td><td>‚úîÔ∏è Conclu√≠do</td><td>100%</td></tr>
            <tr><td><strong>Autentica√ß√£o e RBAC</strong></td><td>Configura√ß√£o do Sanctum para autentica√ß√£o</td><td>‚úîÔ∏è Conclu√≠do</td><td>100%</td></tr>
            <tr><td></td><td>Controladores de autentica√ß√£o (<code>AuthController</code>) com registro de tenant e login</td><td>‚úîÔ∏è Conclu√≠do</td><td>100%</td></tr>
            <tr><td></td><td>Instala√ß√£o e configura√ß√£o b√°sica do <code>spatie/laravel-permission</code> com migrations customizadas</td><td>‚úîÔ∏è Conclu√≠do</td><td>100%</td></tr>
            <tr><td><strong>Persist√™ncia</strong></td><td>Migrations para chamadas, pernas e grava√ß√µes com <code>tenant_id</code></td><td>‚úîÔ∏è Conclu√≠do</td><td>100%</td></tr>
            <tr><td><strong>Ambiente</strong></td><td>Cria√ß√£o do banco <code>fttelecom</code> e execu√ß√£o de <code>migrate --seed</code></td><td>‚úîÔ∏è Conclu√≠do</td><td>100%</td></tr>
            <tr><td></td><td>Ajuste do Apache para servir a aplica√ß√£o via <code>public/</code></td><td>‚úîÔ∏è Conclu√≠do</td><td>100%</td></tr>
            <tr><td><strong>Integra√ß√£o Asterisk</strong></td><td>Servi√ßos/Jobs de integra√ß√£o ARI/AMI e processamento de eventos</td><td>üöß A fazer</td><td>0%</td></tr>
            <tr><td><strong>WebRTC e WebSockets</strong></td><td>Configura√ß√£o do Laravel Reverb/Echo, canais e broadcast</td><td>üöß A fazer</td><td>0%</td></tr>
            <tr><td><strong>Grava√ß√µes</strong></td><td>Integra√ß√£o com S3/MinIO para grava√ß√µes, policies de ciclo de vida</td><td>üöß A fazer</td><td>0%</td></tr>
            <tr><td><strong>Billing e Planos</strong></td><td>Implementa√ß√£o de m√≥dulos de planos, m√©tricas de uso e integra√ß√£o Stripe</td><td>üöß A fazer</td><td>0%</td></tr>
            <tr><td><strong>Observabilidade</strong></td><td>Health checks, m√©tricas Prometheus/Grafana, logs estruturados</td><td>üöß A fazer</td><td>0%</td></tr>
            <tr><td><strong>DevOps</strong></td><td>Pipelines CI/CD (tests, build, deploy), infraestrutura como c√≥digo</td><td>üöß A fazer</td><td>0%</td></tr>
            <tr><td><strong>Testes</strong></td><td>Testes unit√°rios, integra√ß√£o com Asterisk (mock), testes de carga</td><td>üöß A fazer</td><td>0%</td></tr>
        </tbody>
    </table>
    <p class="legend"><strong>Lenda:</strong> ‚úîÔ∏è Conclu√≠do | üöß A fazer</p>

    <h2>2. Diagrama de Arquitetura</h2>
    <p>A seguir apresentamos um diagrama de alto n√≠vel representando os principais componentes do sistema e o fluxo de dados. Para maior clareza, a integra√ß√£o com Asterisk, broker de mensagens e storage externo s√£o mostrados de forma simplificada.</p>
    <pre class="mermaid">
flowchart LR
    subgraph Frontend
        A[Frontend Web/Mobile]
    end

    subgraph API
        B[Laravel API]
        B --> B2{Middleware\nAuth + Tenant}
        B2 --> B3[Controladores (Auth, Calls, Tenants)]
        B3 --> B4[Models c/ HasTenantScope]
    end

    subgraph Persist√™ncia
        D1[(Database MySQL/PostgreSQL)]
        D2[(S3/MinIO)]
    end

    subgraph Telefonia
        E1[(SIP Proxy\nKamailio/OpenSIPS)]
        E2[(Asterisk Cluster)]
    end

    subgraph Mensageria
        F[(Broker\nRedis/RabbitMQ)]
    end

    A -- HTTP/HTTPS --> B
    B4 <---> D1
    B3 -- Jobs/Events --> F
    F -- Eventos de Chamada --> B3
    B3 -- API ARI/AMI --> E2
    E1 -- SIP/WebRTC --> E2
    E2 -- M√≠dia --> D2
    A -- WebSockets/WebRTC --> B
    </pre>

    <h2>3. Roteiro Detalhado (Pr√≥ximas Etapas)</h2>
    <ol>
        <li><strong>Integra√ß√£o com Asterisk</strong>
            <ul>
                <li>Criar servi√ßos ou jobs que consumam ARI/AMI para iniciar, transferir e encerrar chamadas.</li>
                <li>Configurar um broker (Redis ou RabbitMQ) para desacoplar os eventos do Asterisk; publicar eventos de chamadas para jobs no Laravel.</li>
                <li>Modelar a persist√™ncia de metadados (eventos de chamada) nas tabelas <code>calls</code> e <code>call_legs</code>.</li>
            </ul>
        </li>
        <li><strong>Comunica√ß√£o em Tempo Real</strong>
            <ul>
                <li>Configurar Laravel Reverb (ou Pusher) para WebSockets.</li>
                <li>Implementar broadcasting via Laravel Echo para status de chamadas, notifica√ß√µes e chat.</li>
                <li>Proteger conex√µes WebRTC com DTLS-SRTP, ICE, e tokens de curta dura√ß√£o.</li>
            </ul>
        </li>
        <li><strong>WebRTC e Grava√ß√µes</strong>
            <ul>
                <li>Configurar suporte WebRTC no Asterisk ou via gateway dedicado.</li>
                <li>Armazenar grava√ß√µes no storage S3/MinIO com criptografia, versionamento e pol√≠ticas de ciclo de vida.</li>
                <li>Expor API para download/reprodu√ß√£o de grava√ß√µes de forma segura.</li>
            </ul>
        </li>
        <li><strong>Billing e Gest√£o de Planos</strong>
            <ul>
                <li>Criar modelos e migrations para planos, assinaturas e m√©tricas de uso (minutos, canais, armazenamento).</li>
                <li>Integrar com Stripe para cobran√ßas recorrentes e processamento de webhooks.</li>
                <li>Implementar feature flags por plano usando pacotes como <code>spatie/laravel-feature-flags</code>.</li>
            </ul>
        </li>
        <li><strong>Observabilidade e Resili√™ncia</strong>
            <ul>
                <li>Implementar endpoints de health check (<code>/health</code>) e expor m√©tricas via Prometheus.</li>
                <li>Configurar dashboards Grafana para monitorar CPU, mem√≥ria, lat√™ncia de chamadas e uso por tenant.</li>
                <li>Adicionar retry com backoff para jobs falhos e circuit breakers em integra√ß√µes cr√≠ticas.</li>
            </ul>
        </li>
        <li><strong>Testes</strong>
            <ul>
                <li>Escrever testes unit√°rios para modelos e controllers.</li>
                <li>Criar mocks para ARI/AMI e realizar testes de integra√ß√£o simulando chamadas.</li>
                <li>Implementar testes de carga por tenant para identificar problemas de noisy‚Äëneighbor.</li>
            </ul>
        </li>
        <li><strong>DevOps e Infraestrutura</strong>
            <ul>
                <li>Criar pipelines de CI/CD (GitHub Actions/GitLab CI) com lint, testes e deploy automatizado.</li>
                <li>Provisionar ambiente usando Terraform ou Ansible, incluindo clusters Kubernetes ou VMs com failover e backups.</li>
                <li>Configurar backups autom√°ticos do banco e do storage de grava√ß√µes.</li>
            </ul>
        </li>
    </ol>

    <h2>4. Conclus√£o</h2>
    <p>
        O projeto j√° possui uma base s√≥lida com multi‚Äëtenancy, autentica√ß√£o, RBAC b√°sico, persist√™ncia de chamadas e estrutura de bancos de dados. O pr√≥ximo passo √© evoluir para a integra√ß√£o com Asterisk e os servi√ßos de telefonia, adicionar comunica√ß√£o em tempo real, billing e observabilidade, conforme o roteiro acima.  Este roadmap deve ser revisado e ajustado √† medida que as etapas forem conclu√≠das e novas necessidades surgirem.
    </p>
</body>
</html>
